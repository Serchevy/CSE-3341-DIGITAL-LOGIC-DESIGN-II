// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/04/2024 20:40:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Divider
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Divider_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg [15:0] Dividend;
reg [7:0] Divisor;
reg START;
// wires                                               
wire DONE;
wire [7:0] Quotient;
wire [7:0] Remainder;

// assign statements (if any)                          
Divider i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.DONE(DONE),
	.Dividend(Dividend),
	.Divisor(Divisor),
	.Quotient(Quotient),
	.Remainder(Remainder),
	.START(START)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #1000 1'b1;
	#1000;
end 
// Dividend[ 15 ]
initial
begin
	Dividend[15] = 1'b0;
	Dividend[15] = #400000 1'b1;
	Dividend[15] = #160000 1'b0;
end 
// Dividend[ 14 ]
initial
begin
	Dividend[14] = 1'b0;
	Dividend[14] = #400000 1'b1;
	Dividend[14] = #160000 1'b0;
end 
// Dividend[ 13 ]
initial
begin
	Dividend[13] = 1'b0;
	Dividend[13] = #400000 1'b1;
	Dividend[13] = #160000 1'b0;
end 
// Dividend[ 12 ]
initial
begin
	Dividend[12] = 1'b0;
	Dividend[12] = #400000 1'b1;
	Dividend[12] = #160000 1'b0;
end 
// Dividend[ 11 ]
initial
begin
	Dividend[11] = 1'b1;
	Dividend[11] = #160000 1'b0;
	Dividend[11] = #240000 1'b1;
	Dividend[11] = #160000 1'b0;
end 
// Dividend[ 10 ]
initial
begin
	Dividend[10] = 1'b1;
	Dividend[10] = #160000 1'b0;
	Dividend[10] = #240000 1'b1;
	Dividend[10] = #160000 1'b0;
end 
// Dividend[ 9 ]
initial
begin
	Dividend[9] = 1'b1;
	Dividend[9] = #160000 1'b0;
	Dividend[9] = #240000 1'b1;
	Dividend[9] = #160000 1'b0;
end 
// Dividend[ 8 ]
initial
begin
	Dividend[8] = 1'b1;
	Dividend[8] = #160000 1'b0;
	Dividend[8] = #240000 1'b1;
	Dividend[8] = #160000 1'b0;
end 
// Dividend[ 7 ]
initial
begin
	Dividend[7] = 1'b1;
	Dividend[7] = #240000 1'b0;
	Dividend[7] = #160000 1'b1;
	Dividend[7] = #160000 1'b0;
end 
// Dividend[ 6 ]
initial
begin
	Dividend[6] = 1'b1;
	Dividend[6] = #160000 1'b0;
	Dividend[6] = #80000 1'b1;
	Dividend[6] = #80000 1'b0;
	Dividend[6] = #80000 1'b1;
	Dividend[6] = #160000 1'b0;
end 
// Dividend[ 5 ]
initial
begin
	Dividend[5] = 1'b1;
	Dividend[5] = #320000 1'b0;
	Dividend[5] = #80000 1'b1;
	Dividend[5] = #160000 1'b0;
end 
// Dividend[ 4 ]
initial
begin
	Dividend[4] = 1'b1;
	Dividend[4] = #160000 1'b0;
	Dividend[4] = #240000 1'b1;
	Dividend[4] = #160000 1'b0;
end 
// Dividend[ 3 ]
initial
begin
	Dividend[3] = 1'b1;
	Dividend[3] = #240000 1'b0;
end 
// Dividend[ 2 ]
initial
begin
	Dividend[2] = 1'b1;
	Dividend[2] = #320000 1'b0;
	Dividend[2] = #80000 1'b1;
	Dividend[2] = #160000 1'b0;
end 
// Dividend[ 1 ]
initial
begin
	Dividend[1] = 1'b1;
	Dividend[1] = #160000 1'b0;
	Dividend[1] = #80000 1'b1;
	Dividend[1] = #80000 1'b0;
	Dividend[1] = #80000 1'b1;
	Dividend[1] = #160000 1'b0;
end 
// Dividend[ 0 ]
initial
begin
	Dividend[0] = 1'b1;
	Dividend[0] = #160000 1'b0;
	Dividend[0] = #80000 1'b1;
	Dividend[0] = #80000 1'b0;
	Dividend[0] = #240000 1'b1;
	Dividend[0] = #80000 1'b0;
end 
// Divisor[ 7 ]
initial
begin
	Divisor[7] = 1'b1;
	Divisor[7] = #240000 1'b0;
	Divisor[7] = #240000 1'b1;
	Divisor[7] = #80000 1'b0;
end 
// Divisor[ 6 ]
initial
begin
	Divisor[6] = 1'b1;
	Divisor[6] = #320000 1'b0;
	Divisor[6] = #160000 1'b1;
	Divisor[6] = #80000 1'b0;
end 
// Divisor[ 5 ]
initial
begin
	Divisor[5] = 1'b1;
	Divisor[5] = #320000 1'b0;
	Divisor[5] = #160000 1'b1;
	Divisor[5] = #80000 1'b0;
end 
// Divisor[ 4 ]
initial
begin
	Divisor[4] = 1'b1;
	Divisor[4] = #80000 1'b0;
	Divisor[4] = #80000 1'b1;
	Divisor[4] = #80000 1'b0;
	Divisor[4] = #240000 1'b1;
	Divisor[4] = #80000 1'b0;
end 
// Divisor[ 3 ]
initial
begin
	Divisor[3] = 1'b1;
	Divisor[3] = #240000 1'b0;
	Divisor[3] = #80000 1'b1;
	Divisor[3] = #80000 1'b0;
	Divisor[3] = #80000 1'b1;
	Divisor[3] = #80000 1'b0;
end 
// Divisor[ 2 ]
initial
begin
	Divisor[2] = 1'b1;
	Divisor[2] = #320000 1'b0;
	Divisor[2] = #160000 1'b1;
	Divisor[2] = #80000 1'b0;
end 
// Divisor[ 1 ]
initial
begin
	Divisor[1] = 1'b1;
	Divisor[1] = #560000 1'b0;
end 
// Divisor[ 0 ]
initial
begin
	Divisor[0] = 1'b1;
	Divisor[0] = #80000 1'b0;
	Divisor[0] = #80000 1'b1;
	Divisor[0] = #160000 1'b0;
	Divisor[0] = #240000 1'b1;
	Divisor[0] = #80000 1'b0;
end 

// START
initial
begin
	START = 1'b0;
	START = #5000 1'b1;
	START = #5000 1'b0;
	START = #75000 1'b1;
	START = #5000 1'b0;
	START = #75000 1'b1;
	START = #5000 1'b0;
	START = #75000 1'b1;
	START = #5000 1'b0;
	START = #75000 1'b1;
	START = #5000 1'b0;
	START = #75000 1'b1;
	START = #5000 1'b0;
	START = #75000 1'b1;
	START = #5000 1'b0;
	START = #75000 1'b1;
	START = #5000 1'b0;
end 
endmodule

